{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"a-N6Ij6wkZis"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","#!pip install sweetviz\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.metrics import confusion_matrix\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import cross_validate\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import make_pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","from sklearn.metrics import precision_recall_curve"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9771,"status":"ok","timestamp":1729901687967,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"bNWlBaSs-29c","outputId":"5fb01557-01a0-47fa-a59f-a16ea1a9015f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount('/gdrive',force_remount=True)\n","\n","RUTA = '/gdrive/MyDrive/Colab Notebooks/Hotel Reservations.csv'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5gDyoTmIlscJ"},"outputs":[],"source":["df = pd.read_csv(RUTA)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1729901687968,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"hTZscdg2lyVS","outputId":"440887de-f64b-4ff0-c8fd-21170113fab3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Booking_ID  no_of_adults  no_of_children  no_of_weekend_nights  \\\n","0   INN00001             2               0                     1   \n","1   INN00002             2               0                     2   \n","2   INN00003             1               0                     2   \n","3   INN00004             2               0                     0   \n","4   INN00005             2               0                     1   \n","\n","   no_of_week_nights type_of_meal_plan  required_car_parking_space  \\\n","0                  2       Meal Plan 1                           0   \n","1                  3      Not Selected                           0   \n","2                  1       Meal Plan 1                           0   \n","3                  2       Meal Plan 1                           0   \n","4                  1      Not Selected                           0   \n","\n","  room_type_reserved  lead_time  arrival_year  arrival_month  arrival_date  \\\n","0        Room_Type 1        224          2017             10             2   \n","1        Room_Type 1          5          2018             11             6   \n","2        Room_Type 1          1          2018              2            28   \n","3        Room_Type 1        211          2018              5            20   \n","4        Room_Type 1         48          2018              4            11   \n","\n","  market_segment_type  repeated_guest  no_of_previous_cancellations  \\\n","0             Offline               0                             0   \n","1              Online               0                             0   \n","2              Online               0                             0   \n","3              Online               0                             0   \n","4              Online               0                             0   \n","\n","   no_of_previous_bookings_not_canceled  avg_price_per_room  \\\n","0                                     0               65.00   \n","1                                     0              106.68   \n","2                                     0               60.00   \n","3                                     0              100.00   \n","4                                     0               94.50   \n","\n","   no_of_special_requests booking_status  \n","0                       0   Not_Canceled  \n","1                       1   Not_Canceled  \n","2                       0       Canceled  \n","3                       0       Canceled  \n","4                       0       Canceled  "],"text/html":["\n","  <div id=\"df-59427156-31fa-4888-be5d-2b305ba224d0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Booking_ID</th>\n","      <th>no_of_adults</th>\n","      <th>no_of_children</th>\n","      <th>no_of_weekend_nights</th>\n","      <th>no_of_week_nights</th>\n","      <th>type_of_meal_plan</th>\n","      <th>required_car_parking_space</th>\n","      <th>room_type_reserved</th>\n","      <th>lead_time</th>\n","      <th>arrival_year</th>\n","      <th>arrival_month</th>\n","      <th>arrival_date</th>\n","      <th>market_segment_type</th>\n","      <th>repeated_guest</th>\n","      <th>no_of_previous_cancellations</th>\n","      <th>no_of_previous_bookings_not_canceled</th>\n","      <th>avg_price_per_room</th>\n","      <th>no_of_special_requests</th>\n","      <th>booking_status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>INN00001</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Meal Plan 1</td>\n","      <td>0</td>\n","      <td>Room_Type 1</td>\n","      <td>224</td>\n","      <td>2017</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>Offline</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>65.00</td>\n","      <td>0</td>\n","      <td>Not_Canceled</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>INN00002</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>Not Selected</td>\n","      <td>0</td>\n","      <td>Room_Type 1</td>\n","      <td>5</td>\n","      <td>2018</td>\n","      <td>11</td>\n","      <td>6</td>\n","      <td>Online</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>106.68</td>\n","      <td>1</td>\n","      <td>Not_Canceled</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>INN00003</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>Meal Plan 1</td>\n","      <td>0</td>\n","      <td>Room_Type 1</td>\n","      <td>1</td>\n","      <td>2018</td>\n","      <td>2</td>\n","      <td>28</td>\n","      <td>Online</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>60.00</td>\n","      <td>0</td>\n","      <td>Canceled</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>INN00004</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>Meal Plan 1</td>\n","      <td>0</td>\n","      <td>Room_Type 1</td>\n","      <td>211</td>\n","      <td>2018</td>\n","      <td>5</td>\n","      <td>20</td>\n","      <td>Online</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>100.00</td>\n","      <td>0</td>\n","      <td>Canceled</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>INN00005</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Not Selected</td>\n","      <td>0</td>\n","      <td>Room_Type 1</td>\n","      <td>48</td>\n","      <td>2018</td>\n","      <td>4</td>\n","      <td>11</td>\n","      <td>Online</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>94.50</td>\n","      <td>0</td>\n","      <td>Canceled</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59427156-31fa-4888-be5d-2b305ba224d0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-59427156-31fa-4888-be5d-2b305ba224d0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-59427156-31fa-4888-be5d-2b305ba224d0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2441499d-30df-460b-b84b-c6074f8c4a39\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2441499d-30df-460b-b84b-c6074f8c4a39')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2441499d-30df-460b-b84b-c6074f8c4a39 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 36275,\n  \"fields\": [\n    {\n      \"column\": \"Booking_ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 36275,\n        \"samples\": [\n          \"INN04969\",\n          \"INN34541\",\n          \"INN36109\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_adults\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 10,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          2,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_weekend_nights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2,\n          6,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_week_nights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 17,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          2,\n          3,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type_of_meal_plan\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Not Selected\",\n          \"Meal Plan 3\",\n          \"Meal Plan 1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"required_car_parking_space\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"room_type_reserved\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Room_Type 1\",\n          \"Room_Type 4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lead_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 85,\n        \"min\": 0,\n        \"max\": 443,\n        \"num_unique_values\": 352,\n        \"samples\": [\n          176,\n          81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2017,\n        \"max\": 2018,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2018,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival_month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          3,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival_date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1,\n        \"max\": 31,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          31,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"market_segment_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Online\",\n          \"Complementary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"repeated_guest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_previous_cancellations\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 13,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          13,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_previous_bookings_not_canceled\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 58,\n        \"num_unique_values\": 59,\n        \"samples\": [\n          0,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_price_per_room\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35.08942403636991,\n        \"min\": 0.0,\n        \"max\": 540.0,\n        \"num_unique_values\": 3930,\n        \"samples\": [\n          198.68,\n          170.63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_special_requests\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"booking_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Canceled\",\n          \"Not_Canceled\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":95}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":49,"status":"ok","timestamp":1729901687968,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"ot7m-6-WFcFr","outputId":"8a20c26a-bed3-4a93-a406-c56bcfbd0659"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       no_of_adults  no_of_children  no_of_weekend_nights  no_of_week_nights  \\\n","count  36275.000000    36275.000000          36275.000000       36275.000000   \n","mean       1.844962        0.105279              0.810724           2.204300   \n","std        0.518715        0.402648              0.870644           1.410905   \n","min        0.000000        0.000000              0.000000           0.000000   \n","25%        2.000000        0.000000              0.000000           1.000000   \n","50%        2.000000        0.000000              1.000000           2.000000   \n","75%        2.000000        0.000000              2.000000           3.000000   \n","max        4.000000       10.000000              7.000000          17.000000   \n","\n","       required_car_parking_space     lead_time  arrival_year  arrival_month  \\\n","count                36275.000000  36275.000000  36275.000000   36275.000000   \n","mean                     0.030986     85.232557   2017.820427       7.423653   \n","std                      0.173281     85.930817      0.383836       3.069894   \n","min                      0.000000      0.000000   2017.000000       1.000000   \n","25%                      0.000000     17.000000   2018.000000       5.000000   \n","50%                      0.000000     57.000000   2018.000000       8.000000   \n","75%                      0.000000    126.000000   2018.000000      10.000000   \n","max                      1.000000    443.000000   2018.000000      12.000000   \n","\n","       arrival_date  repeated_guest  no_of_previous_cancellations  \\\n","count  36275.000000    36275.000000                  36275.000000   \n","mean      15.596995        0.025637                      0.023349   \n","std        8.740447        0.158053                      0.368331   \n","min        1.000000        0.000000                      0.000000   \n","25%        8.000000        0.000000                      0.000000   \n","50%       16.000000        0.000000                      0.000000   \n","75%       23.000000        0.000000                      0.000000   \n","max       31.000000        1.000000                     13.000000   \n","\n","       no_of_previous_bookings_not_canceled  avg_price_per_room  \\\n","count                          36275.000000        36275.000000   \n","mean                               0.153411          103.423539   \n","std                                1.754171           35.089424   \n","min                                0.000000            0.000000   \n","25%                                0.000000           80.300000   \n","50%                                0.000000           99.450000   \n","75%                                0.000000          120.000000   \n","max                               58.000000          540.000000   \n","\n","       no_of_special_requests  \n","count            36275.000000  \n","mean                 0.619655  \n","std                  0.786236  \n","min                  0.000000  \n","25%                  0.000000  \n","50%                  0.000000  \n","75%                  1.000000  \n","max                  5.000000  "],"text/html":["\n","  <div id=\"df-870381e4-915f-4a2c-b8b2-a73fb724346d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>no_of_adults</th>\n","      <th>no_of_children</th>\n","      <th>no_of_weekend_nights</th>\n","      <th>no_of_week_nights</th>\n","      <th>required_car_parking_space</th>\n","      <th>lead_time</th>\n","      <th>arrival_year</th>\n","      <th>arrival_month</th>\n","      <th>arrival_date</th>\n","      <th>repeated_guest</th>\n","      <th>no_of_previous_cancellations</th>\n","      <th>no_of_previous_bookings_not_canceled</th>\n","      <th>avg_price_per_room</th>\n","      <th>no_of_special_requests</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","      <td>36275.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.844962</td>\n","      <td>0.105279</td>\n","      <td>0.810724</td>\n","      <td>2.204300</td>\n","      <td>0.030986</td>\n","      <td>85.232557</td>\n","      <td>2017.820427</td>\n","      <td>7.423653</td>\n","      <td>15.596995</td>\n","      <td>0.025637</td>\n","      <td>0.023349</td>\n","      <td>0.153411</td>\n","      <td>103.423539</td>\n","      <td>0.619655</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.518715</td>\n","      <td>0.402648</td>\n","      <td>0.870644</td>\n","      <td>1.410905</td>\n","      <td>0.173281</td>\n","      <td>85.930817</td>\n","      <td>0.383836</td>\n","      <td>3.069894</td>\n","      <td>8.740447</td>\n","      <td>0.158053</td>\n","      <td>0.368331</td>\n","      <td>1.754171</td>\n","      <td>35.089424</td>\n","      <td>0.786236</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2017.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>17.000000</td>\n","      <td>2018.000000</td>\n","      <td>5.000000</td>\n","      <td>8.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>80.300000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>57.000000</td>\n","      <td>2018.000000</td>\n","      <td>8.000000</td>\n","      <td>16.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>99.450000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>126.000000</td>\n","      <td>2018.000000</td>\n","      <td>10.000000</td>\n","      <td>23.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>120.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>4.000000</td>\n","      <td>10.000000</td>\n","      <td>7.000000</td>\n","      <td>17.000000</td>\n","      <td>1.000000</td>\n","      <td>443.000000</td>\n","      <td>2018.000000</td>\n","      <td>12.000000</td>\n","      <td>31.000000</td>\n","      <td>1.000000</td>\n","      <td>13.000000</td>\n","      <td>58.000000</td>\n","      <td>540.000000</td>\n","      <td>5.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-870381e4-915f-4a2c-b8b2-a73fb724346d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-870381e4-915f-4a2c-b8b2-a73fb724346d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-870381e4-915f-4a2c-b8b2-a73fb724346d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-606f9943-37e9-4bec-b528-9a73a189c4bd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-606f9943-37e9-4bec-b528-9a73a189c4bd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-606f9943-37e9-4bec-b528-9a73a189c4bd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"no_of_adults\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12824.52483856726,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          36275.0,\n          1.8449620951068229,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12824.618983376778,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.10527911784975878,\n          10.0,\n          0.4026480635891775\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_weekend_nights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12824.559445700932,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          36275.0,\n          0.810723638869745,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_week_nights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12823.806135103609,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.2043004824259134,\n          2.0,\n          36275.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"required_car_parking_space\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12825.088423722018,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0309855272226051,\n          1.0,\n          0.17328084736888597\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lead_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12784.785498648725,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          85.23255685733976,\n          57.0,\n          36275.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12234.02806138302,\n        \"min\": 0.3838364395590917,\n        \"max\": 36275.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2017.8204272915232,\n          2018.0,\n          0.3838364395590917\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival_month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12822.801464849852,\n        \"min\": 1.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.423652653342522,\n          8.0,\n          36275.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arrival_date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12819.933286411135,\n        \"min\": 1.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.596995175740869,\n          16.0,\n          36275.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"repeated_guest\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12825.08946294667,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.02563749138525155,\n          1.0,\n          0.15805346903515535\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_previous_cancellations\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12824.473661091766,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.023349414197105445,\n          13.0,\n          0.3683314479198375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_previous_bookings_not_canceled\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12822.139355010762,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.15341144038594073,\n          58.0,\n          1.754170711442222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_price_per_room\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12776.843959253338,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          103.42353907649897,\n          99.45,\n          36275.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no_of_special_requests\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12824.775296524598,\n        \"min\": 0.0,\n        \"max\": 36275.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          36275.0,\n          0.6196554100620262,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":96}],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":48,"status":"ok","timestamp":1729901687969,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"w_XTacnGwace","outputId":"99c4b35d-b24f-426d-98b3-e64bc77419ac"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 36275 entries, 0 to 36274\n","Data columns (total 19 columns):\n"," #   Column                                Non-Null Count  Dtype  \n","---  ------                                --------------  -----  \n"," 0   Booking_ID                            36275 non-null  object \n"," 1   no_of_adults                          36275 non-null  int64  \n"," 2   no_of_children                        36275 non-null  int64  \n"," 3   no_of_weekend_nights                  36275 non-null  int64  \n"," 4   no_of_week_nights                     36275 non-null  int64  \n"," 5   type_of_meal_plan                     36275 non-null  object \n"," 6   required_car_parking_space            36275 non-null  int64  \n"," 7   room_type_reserved                    36275 non-null  object \n"," 8   lead_time                             36275 non-null  int64  \n"," 9   arrival_year                          36275 non-null  int64  \n"," 10  arrival_month                         36275 non-null  int64  \n"," 11  arrival_date                          36275 non-null  int64  \n"," 12  market_segment_type                   36275 non-null  object \n"," 13  repeated_guest                        36275 non-null  int64  \n"," 14  no_of_previous_cancellations          36275 non-null  int64  \n"," 15  no_of_previous_bookings_not_canceled  36275 non-null  int64  \n"," 16  avg_price_per_room                    36275 non-null  float64\n"," 17  no_of_special_requests                36275 non-null  int64  \n"," 18  booking_status                        36275 non-null  object \n","dtypes: float64(1), int64(13), object(5)\n","memory usage: 5.3+ MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hdMLrrGswvmo"},"outputs":[],"source":["#import sweetviz as sv"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y8YgaUoosBxP"},"outputs":[],"source":["#my_report = sv.analyze(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ybo3zIvAwlhF"},"outputs":[],"source":["#my_report.show_html()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"80GCGt1k4OU_"},"outputs":[],"source":["X = df.drop(['booking_status','Booking_ID','no_of_previous_cancellations','repeated_guest','required_car_parking_space','no_of_previous_bookings_not_canceled'], axis=1)\n","y = df['booking_status']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-qihAGg036Fd"},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1729901687971,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"5r2YQsprKcBL","outputId":"4ac9a6bd-3082-4d24-c3ef-90c062fb5c09"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(29020, 13)"]},"metadata":{},"execution_count":103}],"source":["X_train.shape"]},{"cell_type":"markdown","metadata":{"id":"z746tArfO-qG"},"source":["## Preprocesamiento de la Trainining Set"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kfeeYUtBYbKr"},"outputs":[],"source":["# Se pueden eliminar Request Guest, No of preview Cancelations, Requiered Parking Space\n","# Podria agrupar variables:  Total de noches, total de miembros de la familia\n","# Verificar outliers\n","# Las metricas hay que calcularlas sobre la serie de validacion usando Cross Validate\n","# Usar grid Search para elegir los mejores parametros\n","# Calcular al acuracy balanceado\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4mbaEegU__a9"},"outputs":[],"source":["cat_pipeline = make_pipeline(\n","OneHotEncoder(handle_unknown=\"ignore\"))\n","\n","num_pipeline = make_pipeline(\n","StandardScaler())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ufgZXpKQBTrV"},"outputs":[],"source":["\n","from sklearn.compose import make_column_selector, make_column_transformer\n","\n","preprocessing = make_column_transformer(\n","(num_pipeline, make_column_selector(dtype_include=np.number)),\n","(cat_pipeline, make_column_selector(dtype_include=object)),\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZrBJR90vGetd"},"outputs":[],"source":["hotel_prepared = preprocessing.fit_transform(X_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":37,"status":"ok","timestamp":1729901687972,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"_lUTnTw8UCoQ","outputId":"77db2f9c-129c-49a5-a85e-474cc6a52600"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(29020, 26)"]},"metadata":{},"execution_count":108}],"source":["hotel_prepared.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":580,"status":"ok","timestamp":1729901688518,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"eKS4ZrTuIbD8","outputId":"2b41c397-f0bf-4cec-fb65-09f0a826eea3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":109}],"source":["#preprocessing.get_feature_names_out()\n","type(hotel_prepared)"]},{"cell_type":"markdown","metadata":{"id":"Y6b2OeHOOzdZ"},"source":["## Modelos"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"PeuFqHVL9AfQ"},"outputs":[],"source":["log_reg = make_pipeline(preprocessing, LogisticRegression())\n","#log_reg.fit(X_train, y_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MttAvVWJpHpf"},"outputs":[],"source":["prefix = 'logisticregression__'\n","# Define the grid of alpha values to search\n","param_grid_log = {\n","    prefix + 'C': [0.2,0.8],\n","    prefix + 'fit_intercept':[True, False],\n","    prefix + 'penalty' :[\"l2\",\"l1\"]\n","    }"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cYxRYruIr6Lj"},"outputs":[],"source":["# Create the GridSearchCV object\n","grid_search_log = GridSearchCV(estimator=log_reg, param_grid=param_grid_log, cv=3, scoring='balanced_accuracy',return_train_score=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":795},"executionInfo":{"elapsed":18441,"status":"ok","timestamp":1729901706951,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"Kmxvc7cdIX4S","outputId":"6ef097ad-341a-4988-a738-016c3ea468e3"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:540: FitFailedWarning: \n","12 fits failed out of a total of 24.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","12 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 888, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/pipeline.py\", line 473, in fit\n","    self._final_estimator.fit(Xt, y, **last_step_params[\"fit\"])\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/base.py\", line 1473, in wrapper\n","    return fit_method(estimator, *args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1194, in fit\n","    solver = _check_solver(self.solver, self.penalty, self.dual)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 67, in _check_solver\n","    raise ValueError(\n","ValueError: Solver lbfgs supports only 'l2' or None penalties, got l1 penalty.\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:1103: UserWarning: One or more of the test scores are non-finite: [0.75484265        nan 0.75495325        nan 0.75522718        nan\n"," 0.75543512        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:1103: UserWarning: One or more of the train scores are non-finite: [0.75517759        nan 0.7554544         nan 0.75553689        nan\n"," 0.75559217        nan]\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=3,\n","             estimator=Pipeline(steps=[('columntransformer',\n","                                        ColumnTransformer(transformers=[('pipeline-1',\n","                                                                         Pipeline(steps=[('standardscaler',\n","                                                                                          StandardScaler())]),\n","                                                                         <sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6d12020>),\n","                                                                        ('pipeline-2',\n","                                                                         Pipeline(steps=[('onehotencoder',\n","                                                                                          OneHotEncoder(handle_unknown='ignore'))]),\n","                                                                         <sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c4995db0>)])),\n","                                       ('logisticregression',\n","                                        LogisticRegression())]),\n","             param_grid={'logisticregression__C': [0.2, 0.8],\n","                         'logisticregression__fit_intercept': [True, False],\n","                         'logisticregression__penalty': ['l2', 'l1']},\n","             return_train_score=True, scoring='balanced_accuracy')"],"text/html":["<style>#sk-container-id-8 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-8 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-8 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-8 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-8 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-8 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-8 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-8 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-8 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-8 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-8 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-8 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-8 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-8 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-8 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-8 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-8 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-8 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-8 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-8 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-8 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-8 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-8 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-8 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3,\n","             estimator=Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                                          StandardScaler())]),\n","                                                                         &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6d12020&gt;),\n","                                                                        (&#x27;pipeline-2&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;onehotencoder&#x27;,\n","                                                                                          OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                                                         &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c4995db0&gt;)])),\n","                                       (&#x27;logisticregression&#x27;,\n","                                        LogisticRegression())]),\n","             param_grid={&#x27;logisticregression__C&#x27;: [0.2, 0.8],\n","                         &#x27;logisticregression__fit_intercept&#x27;: [True, False],\n","                         &#x27;logisticregression__penalty&#x27;: [&#x27;l2&#x27;, &#x27;l1&#x27;]},\n","             return_train_score=True, scoring=&#x27;balanced_accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-56\" type=\"checkbox\" ><label for=\"sk-estimator-id-56\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GridSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3,\n","             estimator=Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                                          StandardScaler())]),\n","                                                                         &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6d12020&gt;),\n","                                                                        (&#x27;pipeline-2&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;onehotencoder&#x27;,\n","                                                                                          OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                                                         &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c4995db0&gt;)])),\n","                                       (&#x27;logisticregression&#x27;,\n","                                        LogisticRegression())]),\n","             param_grid={&#x27;logisticregression__C&#x27;: [0.2, 0.8],\n","                         &#x27;logisticregression__fit_intercept&#x27;: [True, False],\n","                         &#x27;logisticregression__penalty&#x27;: [&#x27;l2&#x27;, &#x27;l1&#x27;]},\n","             return_train_score=True, scoring=&#x27;balanced_accuracy&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-57\" type=\"checkbox\" ><label for=\"sk-estimator-id-57\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">best_estimator_: Pipeline</label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n","                                                  Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6cf6f20&gt;),\n","                                                 (&#x27;pipeline-2&#x27;,\n","                                                  Pipeline(steps=[(&#x27;onehotencoder&#x27;,\n","                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6cf47c0&gt;)])),\n","                (&#x27;logisticregression&#x27;,\n","                 LogisticRegression(C=0.8, fit_intercept=False))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-58\" type=\"checkbox\" ><label for=\"sk-estimator-id-58\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;columntransformer: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for columntransformer: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n","                                 Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                  StandardScaler())]),\n","                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6cf6f20&gt;),\n","                                (&#x27;pipeline-2&#x27;,\n","                                 Pipeline(steps=[(&#x27;onehotencoder&#x27;,\n","                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6cf47c0&gt;)])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-59\" type=\"checkbox\" ><label for=\"sk-estimator-id-59\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">pipeline-1</label><div class=\"sk-toggleable__content fitted\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6cf6f20&gt;</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-60\" type=\"checkbox\" ><label for=\"sk-estimator-id-60\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-61\" type=\"checkbox\" ><label for=\"sk-estimator-id-61\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">pipeline-2</label><div class=\"sk-toggleable__content fitted\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7bd6c6cf47c0&gt;</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-62\" type=\"checkbox\" ><label for=\"sk-estimator-id-62\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-63\" type=\"checkbox\" ><label for=\"sk-estimator-id-63\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(C=0.8, fit_intercept=False)</pre></div> </div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":113}],"source":["# Fit GridSearchCV on the training data\n","grid_search_log.fit(X_train, y_train)"]},{"cell_type":"code","source":["resultados_log = grid_search_log.cv_results_\n","df_log = pd.DataFrame(resultados_log)\n","df_log"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":459},"id":"ENVczSdKJtdJ","executionInfo":{"status":"ok","timestamp":1729901767817,"user_tz":300,"elapsed":1026,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"}},"outputId":"a28f7bdb-088b-4db4-f9d9-c78832c75919"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n","0       0.164464      0.021199         0.085732        0.000830   \n","1       0.024849      0.002109         0.000000        0.000000   \n","2       0.136007      0.011411         0.084063        0.001857   \n","3       0.023050      0.000840         0.000000        0.000000   \n","4       0.253329      0.021987         0.114618        0.023497   \n","5       0.028840      0.001030         0.000000        0.000000   \n","6       0.202736      0.029331         0.112538        0.005435   \n","7       0.031913      0.004348         0.000000        0.000000   \n","\n","   param_logisticregression__C  param_logisticregression__fit_intercept  \\\n","0                          0.2                                     True   \n","1                          0.2                                     True   \n","2                          0.2                                    False   \n","3                          0.2                                    False   \n","4                          0.8                                     True   \n","5                          0.8                                     True   \n","6                          0.8                                    False   \n","7                          0.8                                    False   \n","\n","  param_logisticregression__penalty  \\\n","0                                l2   \n","1                                l1   \n","2                                l2   \n","3                                l1   \n","4                                l2   \n","5                                l1   \n","6                                l2   \n","7                                l1   \n","\n","                                              params  split0_test_score  \\\n","0  {'logisticregression__C': 0.2, 'logisticregres...           0.756112   \n","1  {'logisticregression__C': 0.2, 'logisticregres...                NaN   \n","2  {'logisticregression__C': 0.2, 'logisticregres...           0.755882   \n","3  {'logisticregression__C': 0.2, 'logisticregres...                NaN   \n","4  {'logisticregression__C': 0.8, 'logisticregres...           0.756520   \n","5  {'logisticregression__C': 0.8, 'logisticregres...                NaN   \n","6  {'logisticregression__C': 0.8, 'logisticregres...           0.756439   \n","7  {'logisticregression__C': 0.8, 'logisticregres...                NaN   \n","\n","   split1_test_score  split2_test_score  mean_test_score  std_test_score  \\\n","0           0.756075           0.752341         0.754843        0.001769   \n","1                NaN                NaN              NaN             NaN   \n","2           0.756780           0.752198         0.754953        0.001983   \n","3                NaN                NaN              NaN             NaN   \n","4           0.756325           0.752836         0.755227        0.001692   \n","5                NaN                NaN              NaN             NaN   \n","6           0.756560           0.753307         0.755435        0.001506   \n","7                NaN                NaN              NaN             NaN   \n","\n","   rank_test_score  split0_train_score  split1_train_score  \\\n","0                4            0.751600            0.755377   \n","1                5                 NaN                 NaN   \n","2                3            0.752034            0.755536   \n","3                5                 NaN                 NaN   \n","4                2            0.751797            0.755891   \n","5                5                 NaN                 NaN   \n","6                1            0.751720            0.755855   \n","7                5                 NaN                 NaN   \n","\n","   split2_train_score  mean_train_score  std_train_score  \n","0            0.758555          0.755178         0.002843  \n","1                 NaN               NaN              NaN  \n","2            0.758793          0.755454         0.002760  \n","3                 NaN               NaN              NaN  \n","4            0.758923          0.755537         0.002920  \n","5                 NaN               NaN              NaN  \n","6            0.759201          0.755592         0.003060  \n","7                 NaN               NaN              NaN  "],"text/html":["\n","  <div id=\"df-c2884e7c-de0a-44ab-a152-1138a7dd5ed9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean_fit_time</th>\n","      <th>std_fit_time</th>\n","      <th>mean_score_time</th>\n","      <th>std_score_time</th>\n","      <th>param_logisticregression__C</th>\n","      <th>param_logisticregression__fit_intercept</th>\n","      <th>param_logisticregression__penalty</th>\n","      <th>params</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","      <th>split0_train_score</th>\n","      <th>split1_train_score</th>\n","      <th>split2_train_score</th>\n","      <th>mean_train_score</th>\n","      <th>std_train_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.164464</td>\n","      <td>0.021199</td>\n","      <td>0.085732</td>\n","      <td>0.000830</td>\n","      <td>0.2</td>\n","      <td>True</td>\n","      <td>l2</td>\n","      <td>{'logisticregression__C': 0.2, 'logisticregres...</td>\n","      <td>0.756112</td>\n","      <td>0.756075</td>\n","      <td>0.752341</td>\n","      <td>0.754843</td>\n","      <td>0.001769</td>\n","      <td>4</td>\n","      <td>0.751600</td>\n","      <td>0.755377</td>\n","      <td>0.758555</td>\n","      <td>0.755178</td>\n","      <td>0.002843</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.024849</td>\n","      <td>0.002109</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.2</td>\n","      <td>True</td>\n","      <td>l1</td>\n","      <td>{'logisticregression__C': 0.2, 'logisticregres...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.136007</td>\n","      <td>0.011411</td>\n","      <td>0.084063</td>\n","      <td>0.001857</td>\n","      <td>0.2</td>\n","      <td>False</td>\n","      <td>l2</td>\n","      <td>{'logisticregression__C': 0.2, 'logisticregres...</td>\n","      <td>0.755882</td>\n","      <td>0.756780</td>\n","      <td>0.752198</td>\n","      <td>0.754953</td>\n","      <td>0.001983</td>\n","      <td>3</td>\n","      <td>0.752034</td>\n","      <td>0.755536</td>\n","      <td>0.758793</td>\n","      <td>0.755454</td>\n","      <td>0.002760</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.023050</td>\n","      <td>0.000840</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.2</td>\n","      <td>False</td>\n","      <td>l1</td>\n","      <td>{'logisticregression__C': 0.2, 'logisticregres...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.253329</td>\n","      <td>0.021987</td>\n","      <td>0.114618</td>\n","      <td>0.023497</td>\n","      <td>0.8</td>\n","      <td>True</td>\n","      <td>l2</td>\n","      <td>{'logisticregression__C': 0.8, 'logisticregres...</td>\n","      <td>0.756520</td>\n","      <td>0.756325</td>\n","      <td>0.752836</td>\n","      <td>0.755227</td>\n","      <td>0.001692</td>\n","      <td>2</td>\n","      <td>0.751797</td>\n","      <td>0.755891</td>\n","      <td>0.758923</td>\n","      <td>0.755537</td>\n","      <td>0.002920</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.028840</td>\n","      <td>0.001030</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.8</td>\n","      <td>True</td>\n","      <td>l1</td>\n","      <td>{'logisticregression__C': 0.8, 'logisticregres...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.202736</td>\n","      <td>0.029331</td>\n","      <td>0.112538</td>\n","      <td>0.005435</td>\n","      <td>0.8</td>\n","      <td>False</td>\n","      <td>l2</td>\n","      <td>{'logisticregression__C': 0.8, 'logisticregres...</td>\n","      <td>0.756439</td>\n","      <td>0.756560</td>\n","      <td>0.753307</td>\n","      <td>0.755435</td>\n","      <td>0.001506</td>\n","      <td>1</td>\n","      <td>0.751720</td>\n","      <td>0.755855</td>\n","      <td>0.759201</td>\n","      <td>0.755592</td>\n","      <td>0.003060</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.031913</td>\n","      <td>0.004348</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.8</td>\n","      <td>False</td>\n","      <td>l1</td>\n","      <td>{'logisticregression__C': 0.8, 'logisticregres...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2884e7c-de0a-44ab-a152-1138a7dd5ed9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c2884e7c-de0a-44ab-a152-1138a7dd5ed9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c2884e7c-de0a-44ab-a152-1138a7dd5ed9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-398b6d2a-7de2-4e37-ad15-b259c9b09b1f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-398b6d2a-7de2-4e37-ad15-b259c9b09b1f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-398b6d2a-7de2-4e37-ad15-b259c9b09b1f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d3571594-7a96-4081-a1c8-533b1d7c3939\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_log')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d3571594-7a96-4081-a1c8-533b1d7c3939 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_log');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_log","summary":"{\n  \"name\": \"df_log\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"mean_fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09277763329135152,\n        \"min\": 0.023049672444661457,\n        \"max\": 0.25332895914713544,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.024849494298299152,\n          0.028840303421020508,\n          0.16446399688720703\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.011241448068165663,\n        \"min\": 0.0008401923122933021,\n        \"max\": 0.029330992401456913,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0021093192337989634,\n          0.001029854804283206,\n          0.021199098044942306\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_score_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05414588232865517,\n        \"min\": 0.0,\n        \"max\": 0.11461830139160156,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0,\n          0.11253817876180013,\n          0.08406305313110352\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_score_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.008113643207933986,\n        \"min\": 0.0,\n        \"max\": 0.023497150164582925,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0,\n          0.005434733045946922,\n          0.0018573511332307447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_logisticregression__C\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3207134902949093,\n        \"min\": 0.2,\n        \"max\": 0.8,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.8,\n          0.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_logisticregression__fit_intercept\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_logisticregression__penalty\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"l1\",\n          \"l2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"params\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split0_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00029589526940753915,\n        \"min\": 0.7558820237162434,\n        \"max\": 0.7565204699154556,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7558820237162434,\n          0.7564388141265875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split1_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0003037010790991973,\n        \"min\": 0.7560746603452839,\n        \"max\": 0.7567801127712585,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7567801127712585,\n          0.7565599126239593\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split2_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0005047321659963707,\n        \"min\": 0.7521976256696681,\n        \"max\": 0.7533066244022409,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7521976256696681,\n          0.7533066244022409\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00026795209709739296,\n        \"min\": 0.7548426515716921,\n        \"max\": 0.7554351170509293,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7549532540523899,\n          0.7554351170509293\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00019730905028619662,\n        \"min\": 0.001505883335046587,\n        \"max\": 0.0019827181385547953,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0019827181385547953,\n          0.001505883335046587\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rank_test_score\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split0_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00018327103823736584,\n        \"min\": 0.75159978154045,\n        \"max\": 0.7520342137255143,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7520342137255143,\n          0.7517198487216723\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split1_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00024940076128734343,\n        \"min\": 0.7553774965381332,\n        \"max\": 0.7558910676316442,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7555358998329218,\n          0.7558551856516025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split2_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0002692741355563136,\n        \"min\": 0.7585554793503185,\n        \"max\": 0.7592014886749908,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7587930842925013,\n          0.7592014886749908\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00018404143859474483,\n        \"min\": 0.7551775858096339,\n        \"max\": 0.7555921743494219,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7554543992836459,\n          0.7555921743494219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00012754140381991547,\n        \"min\": 0.0027598991032246043,\n        \"max\": 0.00306002345378583,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0027598991032246043,\n          0.00306002345378583\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":115}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1019,"status":"ok","timestamp":1729901639909,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"QUbIUuUaJTSx","outputId":"23095ecb-23d9-4a11-f658-7919c9440205"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'logisticregression__C': 0.8,\n"," 'logisticregression__fit_intercept': False,\n"," 'logisticregression__penalty': 'l2'}"]},"metadata":{},"execution_count":91}],"source":["grid_search_log.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"CWMcsVaIJjnN"},"outputs":[],"source":["best_model_log = grid_search_log.best_estimator_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"collapsed":true,"id":"eUQbtC9CYoHH"},"outputs":[],"source":["SGD = make_pipeline(preprocessing, SGDClassifier(loss='hinge'))\n","#SGD.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"8ubzpD8zdQWM"},"outputs":[],"source":["prefix = 'sgdclassifier__'\n","# Define the grid of alpha values to search\n","param_grid = {\n","    prefix + 'alpha': [0.01,0.1],\n","    prefix + 'learning_rate':['constant','optimal'],\n","    prefix + 'penalty' :[\"l2\",\"l1\"]\n","    }"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9LizMi54esQ9"},"outputs":[],"source":["# Create the GridSearchCV object\n","grid_search = GridSearchCV(estimator=SGD, param_grid=param_grid, cv=3, scoring='balanced_accuracy',return_train_score=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"8ToSpw2ifK84"},"outputs":[],"source":["# Fit GridSearchCV on the training data\n","grid_search.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":459},"executionInfo":{"elapsed":548,"status":"ok","timestamp":1729900870220,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"TzTjfSmiVktM","outputId":"5bdcdc0f-4c61-48ff-f252-c56fa27dbb01"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n","0       0.024272      0.001216         0.000000        0.000000   \n","1       0.021559      0.000419         0.000000        0.000000   \n","2       0.056487      0.002823         0.072696        0.001269   \n","3       0.072449      0.004830         0.074058        0.002565   \n","4       0.022182      0.000974         0.000000        0.000000   \n","5       0.022325      0.000208         0.000000        0.000000   \n","6       0.053807      0.000950         0.071754        0.001319   \n","7       0.070906      0.002532         0.071307        0.000556   \n","\n","   param_sgdclassifier__alpha param_sgdclassifier__learning_rate  \\\n","0                        0.01                           constant   \n","1                        0.01                           constant   \n","2                        0.01                            optimal   \n","3                        0.01                            optimal   \n","4                        0.10                           constant   \n","5                        0.10                           constant   \n","6                        0.10                            optimal   \n","7                        0.10                            optimal   \n","\n","  param_sgdclassifier__penalty  \\\n","0                           l2   \n","1                           l1   \n","2                           l2   \n","3                           l1   \n","4                           l2   \n","5                           l1   \n","6                           l2   \n","7                           l1   \n","\n","                                              params  split0_test_score  \\\n","0  {'sgdclassifier__alpha': 0.01, 'sgdclassifier_...                NaN   \n","1  {'sgdclassifier__alpha': 0.01, 'sgdclassifier_...                NaN   \n","2  {'sgdclassifier__alpha': 0.01, 'sgdclassifier_...           0.744353   \n","3  {'sgdclassifier__alpha': 0.01, 'sgdclassifier_...           0.742082   \n","4  {'sgdclassifier__alpha': 0.1, 'sgdclassifier__...                NaN   \n","5  {'sgdclassifier__alpha': 0.1, 'sgdclassifier__...                NaN   \n","6  {'sgdclassifier__alpha': 0.1, 'sgdclassifier__...           0.690717   \n","7  {'sgdclassifier__alpha': 0.1, 'sgdclassifier__...           0.590791   \n","\n","   split1_test_score  split2_test_score  mean_test_score  std_test_score  \\\n","0                NaN                NaN              NaN             NaN   \n","1                NaN                NaN              NaN             NaN   \n","2           0.745849           0.745663         0.745289        0.000666   \n","3           0.747267           0.737068         0.742139        0.004164   \n","4                NaN                NaN              NaN             NaN   \n","5                NaN                NaN              NaN             NaN   \n","6           0.693586           0.694545         0.692949        0.001626   \n","7           0.585624           0.589230         0.588549        0.002164   \n","\n","   rank_test_score  split0_train_score  split1_train_score  \\\n","0                5                 NaN                 NaN   \n","1                5                 NaN                 NaN   \n","2                1            0.742491            0.748066   \n","3                2            0.742956            0.744284   \n","4                5                 NaN                 NaN   \n","5                5                 NaN                 NaN   \n","6                3            0.693656            0.694394   \n","7                4            0.587467            0.591984   \n","\n","   split2_train_score  mean_train_score  std_train_score  \n","0                 NaN               NaN              NaN  \n","1                 NaN               NaN              NaN  \n","2            0.747634          0.746064         0.002532  \n","3            0.744123          0.743788         0.000592  \n","4                 NaN               NaN              NaN  \n","5                 NaN               NaN              NaN  \n","6            0.692075          0.693375         0.000967  \n","7            0.586960          0.588804         0.002258  "],"text/html":["\n","  <div id=\"df-14397783-d717-47c4-b1d0-72dcf137a1c1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean_fit_time</th>\n","      <th>std_fit_time</th>\n","      <th>mean_score_time</th>\n","      <th>std_score_time</th>\n","      <th>param_sgdclassifier__alpha</th>\n","      <th>param_sgdclassifier__learning_rate</th>\n","      <th>param_sgdclassifier__penalty</th>\n","      <th>params</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","      <th>split0_train_score</th>\n","      <th>split1_train_score</th>\n","      <th>split2_train_score</th>\n","      <th>mean_train_score</th>\n","      <th>std_train_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.024272</td>\n","      <td>0.001216</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.01</td>\n","      <td>constant</td>\n","      <td>l2</td>\n","      <td>{'sgdclassifier__alpha': 0.01, 'sgdclassifier_...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.021559</td>\n","      <td>0.000419</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.01</td>\n","      <td>constant</td>\n","      <td>l1</td>\n","      <td>{'sgdclassifier__alpha': 0.01, 'sgdclassifier_...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.056487</td>\n","      <td>0.002823</td>\n","      <td>0.072696</td>\n","      <td>0.001269</td>\n","      <td>0.01</td>\n","      <td>optimal</td>\n","      <td>l2</td>\n","      <td>{'sgdclassifier__alpha': 0.01, 'sgdclassifier_...</td>\n","      <td>0.744353</td>\n","      <td>0.745849</td>\n","      <td>0.745663</td>\n","      <td>0.745289</td>\n","      <td>0.000666</td>\n","      <td>1</td>\n","      <td>0.742491</td>\n","      <td>0.748066</td>\n","      <td>0.747634</td>\n","      <td>0.746064</td>\n","      <td>0.002532</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.072449</td>\n","      <td>0.004830</td>\n","      <td>0.074058</td>\n","      <td>0.002565</td>\n","      <td>0.01</td>\n","      <td>optimal</td>\n","      <td>l1</td>\n","      <td>{'sgdclassifier__alpha': 0.01, 'sgdclassifier_...</td>\n","      <td>0.742082</td>\n","      <td>0.747267</td>\n","      <td>0.737068</td>\n","      <td>0.742139</td>\n","      <td>0.004164</td>\n","      <td>2</td>\n","      <td>0.742956</td>\n","      <td>0.744284</td>\n","      <td>0.744123</td>\n","      <td>0.743788</td>\n","      <td>0.000592</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.022182</td>\n","      <td>0.000974</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.10</td>\n","      <td>constant</td>\n","      <td>l2</td>\n","      <td>{'sgdclassifier__alpha': 0.1, 'sgdclassifier__...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.022325</td>\n","      <td>0.000208</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.10</td>\n","      <td>constant</td>\n","      <td>l1</td>\n","      <td>{'sgdclassifier__alpha': 0.1, 'sgdclassifier__...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.053807</td>\n","      <td>0.000950</td>\n","      <td>0.071754</td>\n","      <td>0.001319</td>\n","      <td>0.10</td>\n","      <td>optimal</td>\n","      <td>l2</td>\n","      <td>{'sgdclassifier__alpha': 0.1, 'sgdclassifier__...</td>\n","      <td>0.690717</td>\n","      <td>0.693586</td>\n","      <td>0.694545</td>\n","      <td>0.692949</td>\n","      <td>0.001626</td>\n","      <td>3</td>\n","      <td>0.693656</td>\n","      <td>0.694394</td>\n","      <td>0.692075</td>\n","      <td>0.693375</td>\n","      <td>0.000967</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.070906</td>\n","      <td>0.002532</td>\n","      <td>0.071307</td>\n","      <td>0.000556</td>\n","      <td>0.10</td>\n","      <td>optimal</td>\n","      <td>l1</td>\n","      <td>{'sgdclassifier__alpha': 0.1, 'sgdclassifier__...</td>\n","      <td>0.590791</td>\n","      <td>0.585624</td>\n","      <td>0.589230</td>\n","      <td>0.588549</td>\n","      <td>0.002164</td>\n","      <td>4</td>\n","      <td>0.587467</td>\n","      <td>0.591984</td>\n","      <td>0.586960</td>\n","      <td>0.588804</td>\n","      <td>0.002258</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14397783-d717-47c4-b1d0-72dcf137a1c1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-14397783-d717-47c4-b1d0-72dcf137a1c1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-14397783-d717-47c4-b1d0-72dcf137a1c1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3a2087a0-aee7-46f9-8a30-da1deaaafb23\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3a2087a0-aee7-46f9-8a30-da1deaaafb23')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3a2087a0-aee7-46f9-8a30-da1deaaafb23 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1449ffa9-c194-4966-be13-98503bc54e25\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1449ffa9-c194-4966-be13-98503bc54e25 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"mean_fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02272823421141391,\n        \"min\": 0.021558602650960285,\n        \"max\": 0.07244873046875,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.021558602650960285,\n          0.02232535680135091,\n          0.02427188555399577\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_fit_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0015551921879740345,\n        \"min\": 0.00020794604894428504,\n        \"max\": 0.004830436162269926,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.00041869933524372305,\n          0.00020794604894428504,\n          0.001215689458809105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_score_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03873635193860876,\n        \"min\": 0.0,\n        \"max\": 0.07405757904052734,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.07269620895385742,\n          0.07130718231201172,\n          0.07405757904052734\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_score_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0009385833114738359,\n        \"min\": 0.0,\n        \"max\": 0.002565468471520834,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0012690204786057649,\n          0.000556362546983902,\n          0.002565468471520834\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_sgdclassifier__alpha\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.048107023544236384,\n        \"min\": 0.01,\n        \"max\": 0.1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.1,\n          0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_sgdclassifier__learning_rate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"optimal\",\n          \"constant\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"param_sgdclassifier__penalty\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"l1\",\n          \"l2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"params\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split0_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07186531219750052,\n        \"min\": 0.5907913704801394,\n        \"max\": 0.7443532470254328,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7420816850488591,\n          0.5907913704801394\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split1_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07586804775340245,\n        \"min\": 0.58562423654387,\n        \"max\": 0.7472673351338306,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7472673351338306,\n          0.58562423654387\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split2_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07182947441716954,\n        \"min\": 0.5892301902035293,\n        \"max\": 0.7456631170150098,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7370681155048715,\n          0.5892301902035293\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07315845763369641,\n        \"min\": 0.5885485990758462,\n        \"max\": 0.7452886138856806,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.742139045229187,\n          0.5885485990758462\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_test_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0014757479115759,\n        \"min\": 0.0006657656949675798,\n        \"max\": 0.004164011519568723,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.004164011519568723,\n          0.0021638304197016058\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rank_test_score\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split0_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07320136180480448,\n        \"min\": 0.5874665591385929,\n        \"max\": 0.7429558682731505,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7429558682731505,\n          0.5874665591385929\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split1_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07270305972104506,\n        \"min\": 0.5919836654775198,\n        \"max\": 0.7480657516350577,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.744283906392962,\n          0.5919836654775198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"split2_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07492950182676025,\n        \"min\": 0.5869604252568208,\n        \"max\": 0.7476338614180447,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7441228901851475,\n          0.5869604252568208\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07360289397015586,\n        \"min\": 0.5888035499576445,\n        \"max\": 0.74606356197604,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.74378755495042,\n          0.5888035499576445\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std_train_score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0009519257892780685,\n        \"min\": 0.0005917536658979237,\n        \"max\": 0.0025322771139274633,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0005917536658979237,\n          0.0022581546915395627\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":77}],"source":["resultados = grid_search.cv_results_\n","df = pd.DataFrame(resultados)\n","df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":46,"status":"ok","timestamp":1729878392366,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"pvP6dMCHfb-u","outputId":"5d2b7d36-765e-48e8-8a6e-dbaf57f0eece"},"outputs":[{"data":{"text/plain":["{'sgdclassifier__alpha': 0.01,\n"," 'sgdclassifier__learning_rate': 'optimal',\n"," 'sgdclassifier__penalty': 'l2'}"]},"execution_count":32,"metadata":{},"output_type":"execute_result"}],"source":["grid_search.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":221},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1729887331079,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"FE3weS9Dfldb","outputId":"bbc8ecf6-8314-4e25-b843-5e9f11b154e9"},"outputs":[{"data":{"text/html":["<style>#sk-container-id-3 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-3 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-3 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-3 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-3 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-3 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-3 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-3 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-3 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-3 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-3 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-3 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-3 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-3 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-3 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-3 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-3 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-3 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-3 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-3 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n","                                                  Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae05cf0&gt;),\n","                                                 (&#x27;pipeline-2&#x27;,\n","                                                  Pipeline(steps=[(&#x27;onehotencoder&#x27;,\n","                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae041c0&gt;)])),\n","                (&#x27;sgdclassifier&#x27;, SGDClassifier(alpha=0.01, loss=&#x27;log_loss&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n","                                                  Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                                   StandardScaler())]),\n","                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae05cf0&gt;),\n","                                                 (&#x27;pipeline-2&#x27;,\n","                                                  Pipeline(steps=[(&#x27;onehotencoder&#x27;,\n","                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae041c0&gt;)])),\n","                (&#x27;sgdclassifier&#x27;, SGDClassifier(alpha=0.01, loss=&#x27;log_loss&#x27;))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;columntransformer: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for columntransformer: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n","                                 Pipeline(steps=[(&#x27;standardscaler&#x27;,\n","                                                  StandardScaler())]),\n","                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae05cf0&gt;),\n","                                (&#x27;pipeline-2&#x27;,\n","                                 Pipeline(steps=[(&#x27;onehotencoder&#x27;,\n","                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n","                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae041c0&gt;)])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">pipeline-1</label><div class=\"sk-toggleable__content fitted\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae05cf0&gt;</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">pipeline-2</label><div class=\"sk-toggleable__content fitted\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae041c0&gt;</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div> </div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SGDClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.SGDClassifier.html\">?<span>Documentation for SGDClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SGDClassifier(alpha=0.01, loss=&#x27;log_loss&#x27;)</pre></div> </div></div></div></div></div></div>"],"text/plain":["Pipeline(steps=[('columntransformer',\n","                 ColumnTransformer(transformers=[('pipeline-1',\n","                                                  Pipeline(steps=[('standardscaler',\n","                                                                   StandardScaler())]),\n","                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae05cf0>),\n","                                                 ('pipeline-2',\n","                                                  Pipeline(steps=[('onehotencoder',\n","                                                                   OneHotEncoder(handle_unknown='ignore'))]),\n","                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f6b6ae041c0>)])),\n","                ('sgdclassifier', SGDClassifier(alpha=0.01, loss='log_loss'))])"]},"execution_count":33,"metadata":{},"output_type":"execute_result"}],"source":["best_model_sgd = grid_search.best_estimator_\n","best_model_sgd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3009,"status":"ok","timestamp":1729899190392,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"g-lT2fJXziIl","outputId":"efd9565f-cfd9-45e1-f80f-b37f3bd279fc"},"outputs":[{"output_type":"stream","name":"stdout","text":["SGDCLASSIFIER \n","\n","balanced_accuracy validacion: 0.7449443210480844\n","balanced_accuracy train: 0.7461111057090216\n","\n","\n","LOGISTICREGRESSION \n","\n","balanced_accuracy validacion: 0.7554351170509293\n","balanced_accuracy train: 0.7555921743494219\n","\n","\n"]}],"source":["  # Cross Validate: Calcular pressicion y recall usando ese metodo (tanto para entrenamiento como validacion)\n","  # Calcular al acurracy balanceado. Usar el F1 score como metrica final\n","\n","  from sklearn.metrics import balanced_accuracy_score\n","\n","  Lista_modelos = [best_model_sgd,best_model_log]\n","  for index,modelo in enumerate(Lista_modelos):\n","\n","    cv = cross_validate(modelo, X_train, y_train, cv=3,scoring = [\"balanced_accuracy\"], return_estimator=False,return_train_score=True)\n","\n","    print(list(modelo.named_steps.keys())[1].upper(),\"\\n\")\n","    #print(cv_results.keys())\n","    #print('Matriz de confusion:',cm)\n","\n","    print('balanced_accuracy validacion:',np.mean(cv['test_balanced_accuracy']))\n","    print('balanced_accuracy train:',np.mean(cv['train_balanced_accuracy']))\n","    print(\"\\n\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":525,"status":"ok","timestamp":1729899197712,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"7xoJe5LGYbxF","outputId":"c5c42707-4c2b-483c-b977-4fbbdc48df3f"},"outputs":[{"output_type":"stream","name":"stdout","text":["SGDCLASSIFIER \n","\n","balanced_accuracy test: 0.7522438154262621\n","Matriz de confusion test: [[1455  961]\n"," [ 473 4366]]\n","f1 test: 0.8589415699390124\n","\n","\n","LOGISTICREGRESSION \n","\n","balanced_accuracy test: 0.7584581128222814\n","Matriz de confusion test: [[1504  912]\n"," [ 511 4328]]\n","f1 test: 0.8588153586665344\n","\n","\n"]}],"source":["  # Prueba Final con los mejores hiperparametros\n","\n","  from sklearn.metrics import balanced_accuracy_score\n","\n","  Lista_modelos = [best_model_sgd,best_model_log]\n","  for index,modelo in enumerate(Lista_modelos):\n","\n","    #Predicciones sobre la serie de entrenamiento\n","    y_train_pred = modelo.predict(X_train)\n","\n","    # Make predictions on the test set\n","\n","    y_pred = modelo.predict(X_test)\n","\n","    cm_test = confusion_matrix(y_test, y_pred)\n","\n","    ba_test = balanced_accuracy_score(y_test, y_pred)\n","\n","    f1_test=f1_score(y_test, y_pred, pos_label='Not_Canceled')\n","\n","    print(list(modelo.named_steps.keys())[1].upper(),\"\\n\")\n","    #print(cv_results.keys())\n","    #print('Matriz de confusion:',cm)\n","\n","    print('balanced_accuracy test:',ba_test)\n","    print('Matriz de confusion test:',cm_test)\n","    print('f1 test:',f1_test)\n","    print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"n9LAbaH-PswY"},"source":["## GRAFICAS"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q3LCx7SKbp7T"},"outputs":[],"source":["y_scores = best_model_log.decision_function(X_test)"]},{"cell_type":"code","source":["y_scores_sgd = best_model_sgd.decision_function(X_test)"],"metadata":{"id":"NLNnei3cBysb"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DhP9B0pmgIdt"},"outputs":[],"source":["precisions, recalls, thresholds = precision_recall_curve(y_test, y_scores,pos_label='Not_Canceled')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2at_toRknDeC"},"outputs":[],"source":["precisions_sgd, recalls_sgd, thresholds_sgd = precision_recall_curve(y_test, y_scores_sgd,pos_label='Not_Canceled')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":592,"status":"ok","timestamp":1729900066090,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"vkxbeLrajnUr","outputId":"43ea16d2-dbb6-4fb8-8261-d0a2915dfc59"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Calcular el Mean Average Precision\n","import matplotlib.pyplot as plt\n","\n","# Graficar la curva Precision-Recall\n","plt.plot(recalls, precisions, marker='.', label='Precision-Recall curve Log')\n","plt.plot(recalls_sgd, precisions_sgd, marker='.', label='Precision-Recall curve SGD')\n","\n","# Añadir etiquetas a los ejes\n","plt.xlabel('Recall')\n","plt.ylabel('Precision')\n","\n","# Añadir título\n","plt.title('Precision-Recall Curve')\n","\n","# Mostrar leyenda\n","plt.legend()\n","\n","# Mostrar la gráfica\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r2NR4ULemZuW"},"outputs":[],"source":["from sklearn.metrics import roc_curve\n","fpr, tpr, thresholds = roc_curve(y_test, y_scores,pos_label='Not_Canceled')\n","fpr_sgd, tpr_sgd, thresholds_sgd = roc_curve(y_test, y_scores_sgd,pos_label='Not_Canceled')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1729878392368,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"H6Mv8vV_-4qL","outputId":"786d0a38-c462-44f0-a469-bdda6f705b38"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Graficar la curva ROC\n","plt.figure()\n","\n","# Trazar la curva ROC usando fpr y tpr\n","plt.plot(fpr, tpr, color='blue', label='Curva ROC_LOG')\n","plt.plot(fpr_sgd, tpr_sgd, color='red', label='Curva ROC_SGD')\n","\n","# Dibujar la línea diagonal (ROC de un clasificador aleatorio)\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--', label='Clasificador Aleatorio')\n","\n","# Etiquetas y título\n","plt.xlabel('False Positive Rate (FPR)')\n","plt.ylabel('True Positive Rate (TPR)')\n","plt.title('Curva ROC')\n","\n","# Mostrar leyenda\n","plt.legend()\n","\n","# Mostrar la gráfica\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1729900113566,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"nhrCwM5pDyxn","outputId":"e72d01e9-9e34-4ae1-864b-18a7c834c8ac"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8623269869260384"]},"metadata":{},"execution_count":70}],"source":["from sklearn.metrics import roc_auc_score\n","roc_auc_score(y_test, y_scores)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1729900123537,"user":{"displayName":"Alberto Frydman","userId":"15645709566698782283"},"user_tz":300},"id":"XWC5lVTbsuVA","outputId":"759236f0-b7b1-4535-fc15-e45b350c9ca5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8615784639566219"]},"metadata":{},"execution_count":71}],"source":["roc_auc_score(y_test, y_scores_sgd)"]}],"metadata":{"colab":{"provenance":[{"file_id":"1gAs4I9HSBrf48XG0qaAD7Zwb3Zjnx-Y5","timestamp":1729173956286}],"authorship_tag":"ABX9TyOk7SFifVKG5wogeoazCBra"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}